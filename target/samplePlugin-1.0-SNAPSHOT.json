{
  "parents": [
    "system:cdap-data-pipeline[4.0.0,7.0.0)",
    "system:cdap-data-streams[4.0.0,7.0.0)"
  ],
  "properties": {
    "widgets.ErrorCollector-errortransform": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"Error Collector Configuration\",\"properties\":[{\"widget-type\":\"textbox\",\"label\":\"Message Field\",\"name\":\"messageField\",\"plugin-function\":{\"method\":\"POST\",\"widget\":\"outputSchema\",\"plugin-method\":\"getSchema\"},\"widget-attributes\":{\"default\":\"errMsg\"}},{\"widget-type\":\"textbox\",\"label\":\"Code Field\",\"name\":\"codeField\",\"widget-attributes\":{\"default\":\"errCode\"}},{\"widget-type\":\"textbox\",\"label\":\"Stage Field\",\"name\":\"stageField\",\"widget-attributes\":{\"default\":\"errStage\"}}]}],\"outputs\":[]}",
    "widgets.FilesetDelete-postaction": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"Fileset Delete Configuration\",\"properties\":[{\"widget-type\":\"dataset-selector\",\"label\":\"FileSet Name\",\"name\":\"filesetName\"},{\"widget-type\":\"textbox\",\"label\":\"FileSet directory\",\"name\":\"directory\"},{\"widget-type\":\"textbox\",\"label\":\"Delete Regex\",\"name\":\"deleteRegex\"}]}],\"outputs\":[]}",
    "widgets.FilesetMove-action": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"Fileset Delete Configuration\",\"properties\":[{\"widget-type\":\"dataset-selector\",\"label\":\"Source FileSet\",\"name\":\"sourceFileset\"},{\"widget-type\":\"dataset-selector\",\"label\":\"Destination FileSet\",\"name\":\"destinationFileset\"},{\"widget-type\":\"textbox\",\"label\":\"Filter Regex\",\"name\":\"filterRegex\"}]}],\"outputs\":[]}",
    "widgets.StringCase-transform": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"String Case Configuration\",\"properties\":[{\"widget-type\":\"csv\",\"label\":\"Fields to upper case\",\"name\":\"upperFields\",\"description\":\"List of fields to upper case.\",\"widget-attributes\":{\"delimiter\":\",\"}},{\"widget-type\":\"csv\",\"label\":\"Fields to lower case\",\"name\":\"lowerFields\",\"description\":\"List of fields to lower case.\",\"widget-attributes\":{\"delimiter\":\",\"}}]}],\"outputs\":[]}",
    "widgets.TextFileSet-batchsink": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"Text FileSet Sink Configuration\",\"properties\":[{\"widget-type\":\"dataset-selector\",\"label\":\"FileSet Name\",\"name\":\"fileSetName\"},{\"widget-type\":\"textbox\",\"label\":\"Field separator\",\"name\":\"fieldSeparator\"},{\"widget-type\":\"textbox\",\"label\":\"Field separator\",\"name\":\"outputDir\"}]}],\"outputs\":[]}",
    "widgets.TextFileSet-batchsource": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"Text FileSet Source Configuration\",\"properties\":[{\"widget-type\":\"dataset-selector\",\"label\":\"FileSet Name\",\"name\":\"fileSetName\"},{\"widget-type\":\"textbox\",\"label\":\"Input files within the FileSet\",\"name\":\"files\"},{\"widget-type\":\"select\",\"label\":\"Create FileSet if it does not exist\",\"name\":\"createIfNotExists\",\"widget-attributes\":{\"values\":[\"true\",\"false\"],\"default\":\"false\"}},{\"widget-type\":\"select\",\"label\":\"Delete data read on pipeline run success\",\"name\":\"deleteInputOnSuccess\",\"widget-attributes\":{\"values\":[\"true\",\"false\"],\"default\":\"false\"}}]}],\"outputs\":[{\"widget-type\":\"non-editable-schema-editor\",\"schema\":{\"position\":\"long\",\"text\":\"string\"}}]}",
    "widgets.WordCount-batchaggregator": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"Word Count Aggregator Configuration\",\"properties\":[{\"widget-type\":\"textbox\",\"label\":\"Field Name\",\"name\":\"field\"}]}],\"outputs\":[{\"widget-type\":\"non-editable-schema-editor\",\"schema\":{\"word\":\"string\",\"count\":\"long\"}}]}",
    "widgets.WordCount-sparkcompute": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"Word Count Compute Configuration\",\"properties\":[{\"widget-type\":\"textbox\",\"label\":\"Field Name\",\"name\":\"field\"}]}],\"outputs\":[{\"widget-type\":\"non-editable-schema-editor\",\"schema\":{\"word\":\"string\",\"count\":\"long\"}}]}",
    "widgets.WordCount-sparksink": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"Word Count Sink Configuration\",\"properties\":[{\"widget-type\":\"textbox\",\"label\":\"Field Name\",\"name\":\"field\"},{\"widget-type\":\"dataset-selector\",\"label\":\"Table Name\",\"name\":\"tableName\"}]}],\"outputs\":[]}",
    "doc.ErrorCollector-errortransform": "# Error Collector\n\n\nDescription\n-----------\nThe ErrorCollector plugin takes errors emitted from the previous stage and flattens them by adding\nthe error message, code, and stage to the record and outputting the result.\n\nUse Case\n--------\nThe plugin is used when you want to capture errors emitted from another stage and pass them along\nwith all the error information flattened into the record. For example, you may want to connect a sink\nto this plugin in order to store and later examine the error records.\n\nProperties\n----------\n**messageField:** The name of the error message field to use in the output schema. Defaults to 'errMsg'.\nIf this is not specified, the error message will be dropped.\n\n**codeField:** The name of the error code field to use in the output schema. Defaults to 'errCode'.\nIf this is not specified, the error code will be dropped.\n\n**stageField:** The name of the error stage field to use in the output schema. Defaults to 'errStage'.\nIf this is not specified, the error stage will be dropped.\n\n\nExample\n-------\nThis example adds the error message, error code, and error stage as the 'errMsg', 'errCode', and 'errStage' fields.\n\n    {\n        \"name\": \"ErrorCollector\",\n        \"type\": \"errortransform\",\n        \"properties\": {\n            \"messageField\": \"errMsg\",\n            \"codeField\": \"errCode\",\n            \"stageField\": \"errStage\"\n        }\n    }\n\nFor example, suppose the plugin receives this error record:\n\n    +============================+\n    | field name | type | value  |\n    +============================+\n    | A          | int  | 10     |\n    | B          | int  | 20     |\n    +============================+\n\nwith error code 17, error message 'invalid', from stage 'parser'. It will add the error information\nto the record and output:\n\n    +===============================+\n    | field name | type   | value   |\n    +===============================+\n    | A          | int    | 10      |\n    | B          | int    | 20      |\n    | errMsg     | string | invalid |\n    | errCode    | int    | 17      |\n    | errStage   | string | parser  |\n    +===============================+\n",
    "doc.FilesetDelete-postaction": "# FilesetDelete Post Action\n\nDescription\n-----------\n\nIf a pipeline run succeeds, deletes files in a FileSet that match a configurable regex.\n\nUse Case\n--------\n\nThis post action is used if you need to clean up some files after a successful pipeline run.\n\nProperties\n----------\n\n**filesetName:** The name of the FileSet to delete files from.\n\n**directory:** The directory in the FileSet to delete files from. Macro enabled.\n\n**deleteRegex:** Delete files that match this regex.\n\nExample\n-------\n\nThis example deletes any files that have the '.crc' extension from the 2016-01-01 directory of a FileSet named 'users'.\n\n    {\n        \"name\": \"TextFileSet\",\n        \"type\": \"batchsource\",\n        \"properties\": {\n            \"fileSetName\": \"users\",\n            \"directory\": \"2016-01-01\",\n            \"deleteRegex\": \".*\\\\.crc\"\n        }\n    }\n",
    "doc.FilesetMove-action": "# FilesetMove Action\n\nDescription\n-----------\n\nMoves files from one FileSet into another FileSet.\n\nUse Case\n--------\n\nThis action may be used at the start of a pipeline run to move a subset of files from one FileSet into another\nFileSet to process. Or it may be used at the end of a pipeline run to move a subset of files from the output FileSet\nto some other location for further processing.\n\nProperties\n----------\n\n**sourceFileset:** The name of the FileSet to move files from\n\n**destinationFileSet:** The name of the FileSet to move files to\n\n**filterRegex:** Filter any files whose name matches this regex.\nDefaults to '^\\\\.', which filters any files that begin with a period.\n\nExample\n-------\n\nThis example moves files from the 'staging' FileSet into the 'input' FileSet.\n\n    {\n        \"name\": \"TextFileSet\",\n        \"type\": \"batchsource\",\n        \"properties\": {\n            \"sourceFileset\": \"staging\",\n            \"destinationFileset\": \"input\"\n        }\n    }\n",
    "doc.StringCase-transform": "# String Case Transform\n\nDescription\n-----------\n\nChanges configured fields to lowercase or uppercase.\n\nUse Case\n--------\n\nThis transform is used whenever you need to uppercase or lowercase one or more fields.\n\nProperties\n----------\n\n**lowerFields:** Comma separated list of fields to lowercase.\n\n**upperFields:** Comma separated list of fields to uppercase.\n\nExample\n-------\n\nThis example lowercases the 'name' field and uppercases the 'id' field:\n\n    {\n        \"name\": \"StringCase\",\n        \"type\": \"transform\",\n        \"properties\": {\n            \"lowerFields\": \"name\",\n            \"upperFields\": \"id\"\n        }\n    }\n",
    "doc.TextFileSet-batchsink": "# Text FileSet Batch Sink\n\nDescription\n-----------\n\nWrites to a CDAP FileSet in text format. One line is written for each record\nsent to the sink. All record fields are joined using a configurable separator.\n\n\nUse Case\n--------\n\nThis source is used whenever you need to write to a FileSet in text format.\n\nProperties\n----------\n\n**fileSetName:** The name of the FileSet to write to.\n\n**fieldSeparator:** The separator to join input record fields on. Defaults to ','.\n\n**outputDir:** The output directory to write to. Macro enabled.\n\nExample\n-------\n\nThis example writes to a FileSet named 'users', using the '|' character to separate record fields:\n\n    {\n        \"name\": \"TextFileSet\",\n        \"type\": \"batchsink\",\n        \"properties\": {\n            \"fileSetName\": \"users\",\n            \"fieldSeparator\": \"|\",\n            \"outputDir\": \"${outputDir}\"\n        }\n    }\n\nBefore running the pipeline, the 'outputDir' runtime argument must be specified.\n",
    "doc.TextFileSet-batchsource": "# Text FileSet Batch Source\n\nDescription\n-----------\n\nReads from a CDAP FileSet in text format. Outputs records with two fields -- position (long), and text (string).\n\nUse Case\n--------\n\nThis source is used whenever you need to read from a FileSet in text format.\n\nProperties\n----------\n\n**fileSetName:** The name of the FileSet to read from.\n\n**createIfNotExists:** Whether to create the FileSet if it does not exist. Defaults to false.\n\n**deleteInputOnSuccess:** Whether to delete the data read if the pipeline run succeeded. Defaults to false.\n\n**files:** A comma separated list of files in the FileSet to read. Macro enabled.\n\nExample\n-------\n\nThis example reads from a FileSet named 'users' and deletes the data it read if the pipeline run succeeded:\n\n    {\n        \"name\": \"TextFileSet\",\n        \"type\": \"batchsource\",\n        \"properties\": {\n            \"fileSetName\": \"users\",\n            \"deleteInputOnSuccess\": \"true\",\n            \"files\": \"${inputFiles}\"\n        }\n    }\n\nBefore running the pipeline, the 'inputFiles' runtime argument must be specified.\n",
    "doc.WordCount-batchaggregator": "# Word Count Batch Aggregator\n\nDescription\n-----------\n\nFor the configured input string field, counts the number of times each word appears in that field.\nRecords output will have two fields -- word (string), and count (long).\n\nUse Case\n--------\n\nThis plugin is used whenever you want to count the number of times each word appears in a field.\n\nProperties\n----------\n\n**field:** The name of the string field to count words in.\n\nExample\n-------\n\nThis example counts the words in the 'text' field:\n\n    {\n        \"name\": \"WordCount\",\n        \"type\": \"batchaggregator\",\n        \"properties\": {\n            \"field\": \"text\"\n        }\n    }\n",
    "doc.WordCount-sparkcompute": "# Word Count Spark Compute\n\nDescription\n-----------\n\nFor the configured input string field, counts the number of times each word appears in that field.\nRecords output will have two fields -- word (string), and count (long).\n\nUse Case\n--------\n\nThis plugin is used whenever you want to count the number of times each word appears in a field.\n\nProperties\n----------\n\n**field:** The name of the string field to count words in.\n\nExample\n-------\n\nThis example counts the words in the 'text' field:\n\n    {\n        \"name\": \"WordCount\",\n        \"type\": \"sparkcompute\",\n        \"properties\": {\n            \"field\": \"text\"\n        }\n    }\n",
    "doc.WordCount-sparksink": "# Word Count Spark Sink\n\nDescription\n-----------\n\nFor the configured input string field, counts the number of times each word appears in that field.\nThe results are written to a CDAP KeyValueTable.\n\nUse Case\n--------\n\nThis plugin is used whenever you want to count and save the number of times each word appears in a field.\n\nProperties\n----------\n\n**field:** The name of the string field to count words in.\n\n**tableName:** The name of KeyValueTable to store the results in.\n\nExample\n-------\n\nThis example counts the words in the 'text' field and stores the results in the 'wordcounts' KeyValueTable:\n\n    {\n        \"name\": \"WordCount\",\n        \"type\": \"sparksink\",\n        \"properties\": {\n            \"field\": \"text\",\n            \"tableName\": \"wordcounts\"\n        }\n    }\n"
  }
}